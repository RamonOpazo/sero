name: Release

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency: release
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies
      run: uv sync --all-groups

    - name: Run tests
      env:
        SERO_SECURITY__SECRET_KEY: ci-test-secret-key
        SERO_DB__FILEPATH: ${{ runner.temp }}/sero.sqlite
        SERO_LOG__FILEPATH: ${{ runner.temp }}/sero_logs/app.jsonl
        SERO_PROCESSING__DIRPATH: ${{ runner.temp }}/sero_output
      run: uv run pytest

    # Frontend build to ensure main remains buildable
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: 'src/frontend/pnpm-lock.yaml'

    - name: Install frontend dependencies
      working-directory: src/frontend
      run: pnpm install --frozen-lockfile

    - name: Build frontend
      working-directory: src/frontend
      run: pnpm run build

    - name: Upload frontend build artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-static
        path: src/backend/static

    - name: Determine if release is needed
      id: check_release
      shell: bash
      run: |
        git fetch --tags --quiet
        LAST_TAG=$(git describe --tags --abbrev=0 || true)
        if [ -n "$LAST_TAG" ]; then
          RANGE="$LAST_TAG..HEAD"
        else
          RANGE="HEAD"
        fi
        echo "Using range: $RANGE"
        MESSAGES=$(git log --format=%s $RANGE || true)
        echo "$MESSAGES" | sed 's/^/  - /'
        if echo "$MESSAGES" | grep -E '(^feat(\!|:)|^fix:|^perf:|BREAKING CHANGE:)' -q; then
          echo "should_release=true" >> "$GITHUB_OUTPUT"
        else
          echo "should_release=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Python Semantic Release
      if: steps.check_release.outputs.should_release == 'true'
      id: release
      uses: python-semantic-release/python-semantic-release@v9.15.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        root_options: "--strict --verbose"
        
    # - name: Build package
    #   if: steps.release.outputs.released == 'true'
    #   run: uv build

    # - name: Publish to PyPI
    #   if: steps.release.outputs.released == 'true'
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     # Uncomment when you're ready to publish to PyPI
    #     # password: ${{ secrets.PYPI_API_TOKEN }}
    #     repository-url: https://test.pypi.org/legacy/  # Test PyPI for now
    #     password: ${{ secrets.TEST_PYPI_API_TOKEN }}
