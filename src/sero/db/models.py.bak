import uuid
from datetime import datetime, timezone
from sqlalchemy import Text, DateTime, ForeignKey, BLOB, String, Integer, Float, Uuid, CheckConstraint, and_, or_
from sqlalchemy.orm import Mapped, declarative_base, mapped_column, relationship, validates


Base = declarative_base()


class Project(Base):
    __tablename__ = "projects"
    
    id: Mapped[Uuid] = mapped_column(Uuid, primary_key=True, default=lambda: uuid.uuid4())
    created_at: Mapped[DateTime] = mapped_column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))
    updated_at: Mapped[DateTime] = mapped_column(DateTime(timezone=True), nullable=True)
    name: Mapped[str] = mapped_column(String(100), nullable=False, unique=True)
    description: Mapped[str] = mapped_column(Text, nullable=True)
    version: Mapped[int] = mapped_column(Integer, nullable=False)
    contact_name: Mapped[str] = mapped_column(String(100), nullable=False)
    contact_email: Mapped[str] = mapped_column(String(100), nullable=False)
    password_hash: Mapped[bytes] = mapped_column(BLOB, nullable=False)

    documents: Mapped[list["Document"]] = relationship("Document", back_populates="project", cascade="all, delete-orphan")
    template_selections: Mapped[list["Selection"]] = relationship("Selection", back_populates="project", cascade="all, delete-orphan")
    template_prompts: Mapped[list["Prompt"]] = relationship("Prompt", back_populates="project", cascade="all, delete-orphan")


class Document(Base):
    __tablename__ = "documents"

    id: Mapped[Uuid] = mapped_column(Uuid, primary_key=True, default=lambda: uuid.uuid4())
    created_at: Mapped[DateTime] = mapped_column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))
    updated_at: Mapped[DateTime] = mapped_column(DateTime(timezone=True), nullable=True)
    description: Mapped[str] = mapped_column(Text, nullable=True)
    strategy: Mapped[str] = mapped_column(String(10), nullable=True)
    status: Mapped[str] = mapped_column(String(20), nullable=False, default="pending")

    project_id: Mapped[Uuid] = mapped_column(ForeignKey("projects.id"), nullable=False)

    project: Mapped["Project"] = relationship("Project", back_populates="documents")
    selections: Mapped[list["Selection"]] = relationship("Selection", back_populates="document", cascade="all, delete-orphan")
    prompts: Mapped[list["Prompt"]] = relationship("Prompt", back_populates="document", cascade="all, delete-orphan")
    files: Mapped[list["File"]] = relationship("File", back_populates="document", cascade="all, delete-orphan")

    @validates("files")
    def validate_files(self, _key: Uuid, file: "File"):
        contexts = [ i.context for i in self.files ]
        if file.context in contexts:
            raise ValueError(f"File with context {file.context!r} already exists for this document")
        if len(self.files) >= 2:
            raise ValueError("A document can have at most two files")
        if not self.files and file.context != "original":
            raise ValueError("The first file for a document must have the context 'original'")
        return file
    

class File(Base):
    __tablename__ = "files"

    id: Mapped[Uuid] = mapped_column(Uuid, primary_key=True, default=lambda: uuid.uuid4())
    created_at: Mapped[DateTime] = mapped_column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))
    updated_at: Mapped[DateTime] = mapped_column(DateTime(timezone=True), nullable=True)
    filename: Mapped[str] = mapped_column(String(255), nullable=False)
    mime_type: Mapped[str] = mapped_column(String(100), nullable=False)
    context: Mapped[str] = mapped_column(String(10), nullable=False)  # e.g., "original", "obfuscated"
    data: Mapped[bytes] = mapped_column(BLOB, nullable=False)

    document_id: Mapped[Uuid] = mapped_column(ForeignKey("documents.id"), nullable=False)
    encryption_id: Mapped[Uuid] = mapped_column(Uuid, ForeignKey("file_encryptions.id"), nullable=False, unique=True)

    document: Mapped["Document"] = relationship("Document", back_populates="files")
    encryption: Mapped["FileEncryption"] = relationship("FileEncryption", back_populates="file")
    
    @property
    def size(self) -> int:
        return ((len(self.data) / 4) * 3) if self.data else 0
    

class FileEncryption(Base):
    __tablename__ = "file_encryptions"
    
    id: Mapped[Uuid] = mapped_column(Uuid, primary_key=True, default=lambda: uuid.uuid4())
    created_at: Mapped[DateTime] = mapped_column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))
    salt: Mapped[bytes] = mapped_column(BLOB, nullable=False)
    file_hash: Mapped[str] = mapped_column(String(64), nullable=False)  # SHA-256

    file: Mapped["File"] = relationship("File", back_populates="encryption")


class Selection(Base):
    __tablename__ = "selections"
    
    id: Mapped[Uuid] = mapped_column(Uuid, primary_key=True, default=lambda: uuid.uuid4())
    created_at: Mapped[DateTime] = mapped_column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))
    updated_at: Mapped[DateTime] = mapped_column(DateTime(timezone=True), nullable=True)
    source: Mapped[str] = mapped_column(String(10), nullable=False)  # e.g., "user", "ai", etc.
    label: Mapped[str] = mapped_column(String(100), nullable=True)  # User-defined label
    page_number: Mapped[int] = mapped_column(Integer, nullable=True)  # null for all pages
    x: Mapped[float] = mapped_column(Float, nullable=False)  # X coordinate (0-1 normalized)
    y: Mapped[float] = mapped_column(Float, nullable=False)  # Y coordinate (0-1 normalized)
    width: Mapped[float] = mapped_column(Float, nullable=False)  # Width (0-1 normalized)
    height: Mapped[float] = mapped_column(Float, nullable=False)  # Height (0-1 normalized)
    confidence: Mapped[float] = mapped_column(Float, nullable=True)  # AI confidence score (1 if user source)

    project_id: Mapped[Uuid] = mapped_column(ForeignKey("projects.id"), nullable=True)
    document_id: Mapped[Uuid] = mapped_column(ForeignKey("documents.id"), nullable=True)

    project: Mapped["Project"] = relationship("Project", back_populates="template_selections")
    document: Mapped["Document"] = relationship("Document", back_populates="selections")

    __table_args__ = (
        CheckConstraint(
            or_(
                and_(project_id.is_not(None), document_id.is_(None)),
                and_(project_id.is_(None), document_id.is_not(None))
            ),
            name="ck_selection_project_or_document"
        ),
    )


class Prompt(Base):
    __tablename__ = "prompts"

    id: Mapped[Uuid] = mapped_column(Uuid, primary_key=True, default=lambda: uuid.uuid4())
    created_at: Mapped[DateTime] = mapped_column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))
    updated_at: Mapped[DateTime] = mapped_column(DateTime(timezone=True), nullable=True)
    label: Mapped[str] = mapped_column(String(100), nullable=True)  # User-defined label
    text: Mapped[str] = mapped_column(Text, nullable=False)

    project_id: Mapped[Uuid] = mapped_column(ForeignKey("projects.id"), nullable=True)
    document_id: Mapped[Uuid] = mapped_column(ForeignKey("documents.id"), nullable=True)

    project: Mapped["Project"] = relationship("Project", back_populates="template_prompts")
    document: Mapped["Document"] = relationship("Document", back_populates="prompts")

    __table_args__ = (
        CheckConstraint(
            or_(
                and_(project_id.is_not(None), document_id.is_(None)),
                and_(project_id.is_(None), document_id.is_not(None))
            ),
            name="ck_prompt_project_or_document"
        ),
    )
    